class Circle{constructor(a,b,c){this.x=a,this.y=b,this.r=c,this.rSquared=this.r*this.r}contains(a){let b=Math.pow(a.x-this.x,2)+Math.pow(a.y-this.y,2);return b<=this.rSquared}intersects(a){var b=Math.abs(a.x-this.x),c=Math.abs(a.y-this.y),d=this.r,e=a.w,f=a.h,g=Math.pow(b-e,2)+Math.pow(c-f,2);return!(b>d+e||c>d+f)&&(!!(b<=e||c<=f)||g<=this.rSquared)}}class point{constructor(a,b,c){this.x=a,this.y=b,this.userData=c}}class Rectangle{constructor(a,b,c,d){this.x=a,this.y=b,this.w=c,this.h=d}contains(a){return a.x>=this.x-this.w&&a.x<this.x+this.w&&a.y>=this.y-this.h&&a.y<this.y+this.h}intersects(a){return!(a.x-a.w>this.x+this.w||a.x+a.w<this.x-this.w||a.y-a.h>this.y+this.h||a.y+a.h<this.y-this.h)}}class Quadtree{constructor(a,b){this.rectangle=a,this.capacity=b,this.points=[],this.divided=!1}subdivide(){let a=this.rectangle.x,b=this.rectangle.y,c=this.rectangle.w,d=this.rectangle.h;this.ne=new Quadtree(new Rectangle(a,b,c/2,d/2),this.capacity),this.no=new Quadtree(new Rectangle(a+c/2,b,c/2,d/2),this.capacity),this.se=new Quadtree(new Rectangle(a,b+d/2,c/2,d/2),this.capacity),this.so=new Quadtree(new Rectangle(a+c/2,b+d/2,c/2,d/2),this.capacity),this.divided=!0}insert(a){if(this.rectangle.contains(a))return this.points.length<this.capacity?(this.points.push(a),!0):(this.divided||this.subdivide(),!!this.ne.insert(a)||!!this.no.insert(a)||!!this.se.insert(a)||!!this.so.insert(a)||void 0)}draw(){let a=this.rectangle;ctx.save(),ctx.beginPath(),ctx.strokeRect(a.x,a.y,a.w,a.h),ctx.stroke(),ctx.closePath(),ctx.restore(),this.divided&&(this.ne.draw(),this.no.draw(),this.se.draw(),this.so.draw())}query(a,b){if(b||(b=[]),!!this.rectangle.intersects(a)){for(let c of this.points)a.contains(c)&&b.push(c);return this.divided&&(this.ne.query(a,b),this.no.query(a,b),this.se.query(a,b),this.so.query(a,b)),b}}}class particle{constructor(a,b){this.x=a,this.y=b,this.r=3*Math.random()+1,this.dx=3*(Math.random()-.5),this.dy=3*(Math.random()-.5)}draw(){ctx.save(),ctx.beginPath(),ctx.arc(this.x,this.y,this.r,0,2*Math.PI,!1),ctx.fillStyle="rgba(255,255,255,1)",ctx.fill(),ctx.restore()}update(){(this.x+this.r>width+pointerMargin||this.x-this.r<-pointerMargin)&&(this.dx=-this.dx),(this.y+this.r>height+pointerMargin||this.y-this.r<-pointerMargin)&&(this.dy=-this.dy),this.x+=this.dx,this.y+=this.dy,this.draw()}intersects(a,b){var c=a-this.x,d=b-this.y;return Math.sqrt(c*c+d*d)}}function animate(){requestAnimationFrame(animate),ctx.clearRect(0,0,width,height),qTree=new Quadtree(new Rectangle(0,0,width,height),4);for(let c of particlesArray){c.update(),qTree.insert(new point(c.x,c.y,c));let d=qTree.query(new Circle(c.x,c.y,linkMargin));for(let e of d){var a=c.intersects(e.x,e.y);ctx.save(),ctx.beginPath(),ctx.moveTo(c.x,c.y),ctx.lineTo(e.x,e.y);var b=1-a/linkMargin;b/=2,ctx.strokeStyle=`rgba(255,255,255,${b})`,ctx.stroke(),ctx.closePath(),ctx.restore()}}founds=qTree.query(range);for(let a of founds)p=a.userData,dx=p.x-mouse.x,dy=p.y-mouse.y,da=Math.sqrt(dx*dx+dy*dy),ox=dx/da*pointerMargin-dx,oy=dy/da*pointerMargin-dy,1==mode?(p.x+=.5*ox,p.y+=.5*oy):2==mode?(particlesArray[0].x=mouse.x,particlesArray[0].y=mouse.y):(p.x+=5*p.dx,p.y+=5*p.dy);ctx.save(),ctx.beginPath(),ctx.strokeStyle="rgba(255,0,0,0.5)",ctx.stroke(),ctx.closePath(),ctx.restore()}var canvas=document.querySelector("canvas"),ctx=canvas.getContext("2d");canvas.width=window.innerWidth,canvas.height=window.innerHeight;var width=canvas.width,height=canvas.height,mouse={x:-200,y:-200};window.addEventListener("mouseout",function(){mouse.x=-200,mouse.y=-200,range.x=mouse.x,range.y=mouse.y}),window.addEventListener("mousemove",function(){mouse.x=event.x,mouse.y=event.y,range.x=mouse.x,range.y=mouse.y}),window.addEventListener("resize",function(){canvas.width=window.innerWidth,canvas.height=window.innerHeight,width=canvas.width,height=canvas.height,init()});let range;var qTree,linkMargin,particlesNumber,pointerMargin,mode,particlesArray;function init(){linkMargin=120,particlesNumber=150,pointerMargin=200,mode=1,particlesArray=[];for(var a=0;a<particlesNumber;a++)particlesArray[a]=new particle(Math.random()*width,Math.random()*height);range=new Circle(0,0,pointerMargin)}init(),animate();
